import PySimpleGUI as sg
import json

class Mesa:
    def __init__(self, numero):
        self.numero = numero
        self.productos = {}

    def agregar_producto(self, producto, precio):
        if producto in self.productos:
            self.productos[producto] += 1
        else:
            self.productos[producto] = 1

class RestauranteApp:
    def __init__(self):
        self.mesas = {}
        self.productos = {}
        self.cargar_datos()
        self.mesa_seleccionada = None
        self.cargar_productos()

    def guardar_datos(self):
        with open("datos.json", "w") as archivo:
            datos = {mesa.numero: mesa.productos for mesa in self.mesas.values()}
            json.dump(datos, archivo)

    def cargar_datos(self):
        try:
            with open("datos.json", "r") as archivo:
                datos = json.load(archivo)
                for numero, productos in datos.items():
                    mesa = Mesa(int(numero))
                    mesa.productos = productos
                    self.mesas[int(numero)] = mesa
        except FileNotFoundError:
            pass

    def cargar_productos(self):
        try:
            with open("productos.json", "r") as archivo_productos:
                self.productos = json.load(archivo_productos)
        except FileNotFoundError:
            pass

    def guardar_productos(self):
        with open("productos.json", "w") as archivo_productos:
            json.dump(self.productos, archivo_productos)

    def agregar_mesa(self, numero):
        if numero not in self.mesas:
            mesa = Mesa(numero)
            self.mesas[numero] = mesa
            self.guardar_datos()

    def agregar_producto_a_mesa(self, producto):
        if self.mesa_seleccionada:
            self.mesa_seleccionada.agregar_producto(producto, self.productos[producto])
            self.guardar_datos()
            sg.popup(f"Se agregó {producto} a la mesa {self.mesa_seleccionada.numero}.")

    def ver_productos(self):
        if self.mesa_seleccionada:
            productos = self.mesa_seleccionada.productos
            layout = [[sg.Text(f"Productos de la mesa {self.mesa_seleccionada.numero}")]]
            for producto, cantidad in productos.items():
                layout.append([sg.Text(f"{producto}: {cantidad}")])
            layout.append([sg.Button("Agregar Producto"), sg.Button("Eliminar Producto"), sg.Button("Cambiar Precio"), sg.Button("Sacar Cuenta y Reiniciar")])
            window = sg.Window("Productos de la Mesa", layout)

            while True:
                event, _ = window.read()
                if event == sg.WIN_CLOSED:
                    break
                elif event == "Agregar Producto":
                    producto_seleccionado = sg.popup_get_text("Ingresa el nombre del producto:")
                    if producto_seleccionado in self.productos:
                        self.agregar_producto_a_mesa(producto_seleccionado)
                    else:
                        sg.popup_error("Producto no encontrado en la lista.")
                elif event == "Eliminar Producto":
                    producto_seleccionado = sg.popup_get_text("Ingresa el nombre del producto a eliminar:")
                    if producto_seleccionado in self.mesa_seleccionada.productos:
                        del self.mesa_seleccionada.productos[producto_seleccionado]
                        self.guardar_datos()
                        sg.popup(f"Se eliminó {producto_seleccionado} de la mesa {self.mesa_seleccionada.numero}.")
                    else:
                        sg.popup_error("Producto no encontrado en la mesa.")
                elif event == "Cambiar Precio":
                    producto_seleccionado = sg.popup_get_text("Ingresa el nombre del producto:")
                    if producto_seleccionado in self.productos:
                        nuevo_precio = sg.popup_get_text(f"Ingresa el nuevo precio para {producto_seleccionado}:")
                        self.productos[producto_seleccionado] = float(nuevo_precio)
                        self.guardar_productos()
                        sg.popup(f"Precio de {producto_seleccionado} actualizado.")
                    else:
                        sg.popup_error("Producto no encontrado en la lista.")
                elif event == "Sacar Cuenta y Reiniciar":
                    total = sum(self.mesa_seleccionada.productos.values())
                    sg.popup(f"Total de la mesa {self.mesa_seleccionada.numero}: ${total:.2f}")
                    self.mesa_seleccionada.productos = {}
                    self.guardar_datos()
                    window.close()
                    break

            window.close()
        else:
            sg.popup_error("Selecciona una mesa antes de ver los productos.")

    def crear_interfaz(self):
        layout = [
            [sg.Button("Agregar Mesa"), sg.Button("Definir Productos"), sg.Button("Ver Lista de Precios")],
            [sg.Text("Mesas disponibles:"), sg.Listbox(values=list(self.mesas.keys()), key="mesas_listbox", size=(15, 10))],
            [sg.Button("Ver Productos"), sg.Button("Salir")]
        ]
        window = sg.Window("Restaurante App", layout, size=(800, 600))

        while True:
            event, values = window.read()
            if event == sg.WIN_CLOSED or event == "Salir":
                break
            elif event == "Agregar Mesa":
                numero_mesa = sg.popup_get_text("Ingresa el número de la mesa:")
                try:
                    self.agregar_mesa(int(numero_mesa))
                    window["mesas_listbox"].update(values=list(self.mesas.keys()))
                except ValueError:
                    sg.popup_error("Ingresa un número válido para el número de mesa.")
            elif event == "Definir Productos":
                self.definir_productos()
            elif event == "Ver Lista de Precios":
                self.ver_lista_precios()
            elif event == "Ver Productos":
                seleccion = values["mesas_listbox"]
                if seleccion:
                    numero_mesa = int(seleccion[0])
                    self.mesa_seleccionada = self.mesas.get(numero_mesa)
                    self.ver_productos()

        window.close()

    def definir_productos(self):
        layout = [
            [sg.Text("Definir Productos")],
            [sg.Text("Nombre del Producto"), sg.InputText(key="producto")],
            [sg.Text("Precio del Producto"), sg.InputText(key="precio")],
            [sg.Button("Agregar Producto"), sg.Button("Guardar y Cerrar")]
        ]
        window = sg.Window("Definir Productos", layout)

        while True:
            event, values = window.read()
            if event == sg.WIN_CLOSED or event == "Guardar y Cerrar":
                break
            elif event == "Agregar Producto":
                nombre_producto = values["producto"]
                precio_producto = values["precio"]
                if nombre_producto and precio_producto:
                    self.productos[nombre_producto] = float(precio_producto)
                    sg.popup(f"Producto {nombre_producto} agregado con éxito.")
                    window.find_element("producto").Update("")
                    window.find_element("precio").Update("")

        window.close()

    def ver_lista_precios(self):
        precios = "\n".join([f"{producto}: ${precio:.2f}" for producto, precio in self.productos.items()])
        sg.popup_scrolled("Lista de Precios:", precios, size=(400, 300))

if __name__ == "__main__":
    app = RestauranteApp()
    app.crear_interfaz()
